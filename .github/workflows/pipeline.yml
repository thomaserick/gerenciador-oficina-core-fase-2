name: Build CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  PROJECT_NAME: 'gerenciador-oficina-core'
  JAVA_VERSION: '17.0.13'
  DISTRIBUTION: 'zulu'
  AWS_REGION: 'us-east-1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v3
        with:
          java-version: ${{env.JAVA_VERSION}}
          distribution: ${{env.DISTRIBUTION}}
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  #  test:
  #    name: Run Tests
  #    runs-on: ubuntu-latest
  #    needs: build
  #    steps:
  #      - name: Checkout source
  #        uses: actions/checkout@v4
  #
  #      - name: Set up JDK ${{env.JAVA_VERSION}}
  #        uses: actions/setup-java@v4
  #        with:
  #          java-version: ${{env.JAVA_VERSION}}
  #          distribution: ${{env.DISTRIBUTION}}
  #
  #      - name: Run Unit Tests
  #        run: mvn -B test

  #  sonar:
  #    name: SonarQube Analysis
  #    runs-on: ubuntu-latest
  #    needs: test
  #    steps:
  #      - name: Checkout source
  #        uses: actions/checkout@v4
  #
  #      - name: Set up JDK ${{env.JAVA_VERSION}}
  #        uses: actions/setup-java@v4
  #        with:
  #          java-version: ${{env.JAVA_VERSION}}
  #          distribution: ${{env.DISTRIBUTION}}
  #
  #      - name: Cache SonarQube packages
  #        uses: actions/cache@v4
  #        with:
  #          path: ~/.sonar/cache
  #          key: ${{ runner.os }}-sonar
  #          restore-keys: ${{ runner.os }}-sonar
  #
  #      - name: Run SonarQube Analysis
  #        env:
  #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=CaioMC_gerenciador-oficina-core
  #
  #  docker:
  #    name: Publish Docker Image
  #    runs-on: ubuntu-latest
  #    needs: sonar
  #    steps:
  #      - name: Checkout source
  #        uses: actions/checkout@v4
  #
  #      - name: Download build artifact
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: app-jar
  #          path: app
  #
  #      - name: Log in to Docker Hub
  #        uses: docker/login-action@v3
  #        with:
  #          username: ${{ secrets.DOCKERHUB_USERNAME }}
  #          password: ${{ secrets.DOCKERHUB_TOKEN }}
  #
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v3
  #
  #      - name: Build and Push Docker Image
  #        uses: docker/build-push-action@v6
  #        with:
  #          push: true
  #          tags: |
  #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:${{ github.run_number }}
  #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:latest
  #          context: .

  aws-deploy:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # ðŸ”¹ Configurar AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{env.AWS_REGION}}

      # ðŸ”¹ Instalar kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # ðŸ”¹ Atualizar kubeconfig para o cluster EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{ env.PROJECT_NAME }}

      - name: Atualizar e aplicar ConfigMap com endpoint do RDS
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier ${{ env.PROJECT_NAME }}-instance \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)
          sed -i "s|{{RDS_ENDPOINT}}|$RDS_ENDPOINT|g" ./devops/k8s/prod/configmap.yaml

      - name: Substituir variÃ¡veis do Secret SMTP
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          sed -i "s|\${SMTP_USERNAME}|${SMTP_USERNAME}|g" ./devops/k8s/prod/smtp-secret.yaml
          sed -i "s|\${SMTP_PASSWORD}|${SMTP_PASSWORD}|g" ./devops/k8s/prod/smtp-secret.yaml

      # ðŸ”¹ Deploy no Kubernetes
      - name: Deploy to EKS
        run: |
          chmod +x ./devops/scripts/deploy-prod-k8s.sh
          ./devops/scripts/deploy-prod-k8s.sh

